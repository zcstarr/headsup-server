/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AuthorizedOperator = ContractEventLog<{
  operator: string;
  tokenOwner: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type DataChanged = ContractEventLog<{
  dataKey: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RevokedOperator = ContractEventLog<{
  operator: string;
  tokenOwner: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  tokenId: string;
  force: boolean;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: boolean;
  5: string;
}>;

export interface HeadsUp extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): HeadsUp;
  clone(): HeadsUp;
  methods: {
    authorizeOperator(
      operator: string,
      tokenId: string | number[]
    ): NonPayableTransactionObject<void>;

    balanceOf(tokenOwner: string): NonPayableTransactionObject<string>;

    computeView(): NonPayableTransactionObject<void>;

    generateCollectionJSON(): NonPayableTransactionObject<string>;

    generateJSON(): NonPayableTransactionObject<string>;

    "getData(bytes32[])"(
      dataKeys: (string | number[])[]
    ): NonPayableTransactionObject<string[]>;

    "getData(bytes32)"(
      key: string | number[]
    ): NonPayableTransactionObject<string>;

    getIssue(
      issueNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNumberOfIssues(): NonPayableTransactionObject<string>;

    getOperatorsOf(
      tokenId: string | number[]
    ): NonPayableTransactionObject<string[]>;

    isOperatorFor(
      operator: string,
      tokenId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    mintFeedNft(force: boolean): NonPayableTransactionObject<void>;

    newsletterArrayKey(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    revokeOperator(
      operator: string,
      tokenId: string | number[]
    ): NonPayableTransactionObject<void>;

    setCoverData(jsonUrl: string | number[]): NonPayableTransactionObject<void>;

    "setData(bytes32[],bytes[])"(
      dataKeys: (string | number[])[],
      dataValues: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    "setData(bytes32,bytes)"(
      dataKey: string | number[],
      dataValue: string | number[]
    ): NonPayableTransactionObject<void>;

    setNewIssue(content: string | number[]): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    tokenIdCounter(): NonPayableTransactionObject<string>;

    tokenIdsOf(tokenOwner: string): NonPayableTransactionObject<string[]>;

    tokenMetadataJsonUrl(): NonPayableTransactionObject<string>;

    tokenOwnerOf(
      tokenId: string | number[]
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      from: string,
      to: string,
      tokenId: string | number[],
      force: boolean,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    transferBatch(
      from: string[],
      to: string[],
      tokenId: (string | number[])[],
      force: boolean,
      data: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateIssue(
      content: string | number[],
      issueNumber: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AuthorizedOperator(cb?: Callback<AuthorizedOperator>): EventEmitter;
    AuthorizedOperator(
      options?: EventOptions,
      cb?: Callback<AuthorizedOperator>
    ): EventEmitter;

    DataChanged(cb?: Callback<DataChanged>): EventEmitter;
    DataChanged(
      options?: EventOptions,
      cb?: Callback<DataChanged>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RevokedOperator(cb?: Callback<RevokedOperator>): EventEmitter;
    RevokedOperator(
      options?: EventOptions,
      cb?: Callback<RevokedOperator>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AuthorizedOperator", cb: Callback<AuthorizedOperator>): void;
  once(
    event: "AuthorizedOperator",
    options: EventOptions,
    cb: Callback<AuthorizedOperator>
  ): void;

  once(event: "DataChanged", cb: Callback<DataChanged>): void;
  once(
    event: "DataChanged",
    options: EventOptions,
    cb: Callback<DataChanged>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RevokedOperator", cb: Callback<RevokedOperator>): void;
  once(
    event: "RevokedOperator",
    options: EventOptions,
    cb: Callback<RevokedOperator>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
